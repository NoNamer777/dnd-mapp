# TODO: Create versioned images whenever a new tag is pushed to the repository and tag the last pushed version as the latest
name: Build DnD-Mapp Docker image
on:
    push:
        branches:
            - main
permissions:
    contents: read
    packages: write
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: nonamer777/dnd-mapp
jobs:
    build-docker-image:
        name: Build DnD-Mapp Docker image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
              with:
                  platforms: arm,arm64
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
              id: docker-buildx
              with:
                  platforms: linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64
            - name: Log in to the Container registry
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=schedule,enable=false,pattern=nightly
                      type=edge,enable=true,branch=$repo.default_branch
                      type=ref,enable=false,event=branch
                      type=ref,enable=false,event=pr
                      type=raw,enable=true,value=dev
            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: Dockerfile
                  push: true
                  labels: ${{ steps.meta.outputs.labels }}
                  tags: ${{ steps.meta.outputs.tags }}
                  platforms: ${{ steps.docker-buildx.outputs.platforms }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
