# TODO: Create versioned images whenever a new tag is pushed to the repository and tag the last pushed version as the latest
name: Build DnD-Mapp Docker image
on:
    push:
concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
    cancel-in-progress: true
permissions:
    contents: read
    packages: write
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: nonamer777/dnd-mapp
jobs:
    build-docker-image:
        name: Build DnD-Mapp Docker image
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                platform:
                    - linux/amd64
                    - linux/arm/v6
                    - linux/arm/v7
                    - linux/arm64
                    - linux/arm64/v8
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Extract metadata for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                  context: .
                  file: Dockerfile
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: ${{ matrix.platform }}
                  outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
            - name: Export digest
              run: |
                  mkdir -p /tmp/digests
                  digest="${{ steps.build.outputs.digest }}"
                  touch "/tmp/digests/${digest#sha256:}"
            - name: Upload digest
              uses: actions/upload-artifact@v3
              with:
                  name: digests
                  path: /tmp/digests/*
                  if-no-files-found: error
                  retention-days: 1
    merge:
        runs-on: ubuntu-latest
        needs: build-docker-image
        steps:
            - name: Download digests
              uses: actions/download-artifact@v3
              with:
                  name: digests
                  path: /tmp/digests
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Extract metadata for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=schedule,enable=false,pattern=nightly
                      type=edge,enable=true,branch=$repo.default_branch
                      type=ref,enable=false,event=branch
                      type=ref,enable=false,event=pr
                      type=raw,enable=true,value=dev
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Create manifest list and push
              working-directory: /tmp/digests
              run: |
                  docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
            - name: Inspect image
              run: |
                  docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
